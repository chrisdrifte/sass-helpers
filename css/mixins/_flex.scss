/**
 * Flexbox
 *
 * A magic wand for flexbox layouts.
 */

/**
 * row()
 *
 * Align child elements in row
 */
@mixin flex-row($justify: flex-start, $align: center) {
  display: flex;
  flex-flow: row nowrap;
  justify-content: $justify;
  align-items: $align;

  > * {
    flex-shrink: 0;
    flex-grow: 0;
  }
}

/**
 * column()
 *
 * Align child elements in column
 */
@mixin flex-column($justify: center, $align: center) {
  display: flex;
  flex-flow: column nowrap;
  justify-content: $justify;
  align-items: $align;

  > * {
    flex-shrink: 0;
    flex-grow: 0;
  }
}

/**
 * center()
 *
 * Center child elements.
 */
@mixin flex-center($flow: column, $axis: vertical) {
  display: flex;
  flex-flow: $flow;

  @if $axis == both {
    justify-content: center;
    align-items: center;
    text-align: center;
  } @else {
    @if $axis == vertical {
      @if $flow == column {
        justify-content: center;
      }
      @if $flow == row {
        align-items: center;
      }
    }
    @if $axis == horizontal {
      @if $flow == column {
        align-items: center;
      }
      @if $flow == row {
        justify-content: center;
      }
      text-align: center;
    }
  }
}

/**
 * fit()
 *
 * Make element into a wrapper that sizes its child to fit automatically.
 *
 * Parameters:
 * $method      (string)    value of child object-fit
 * $position    (mixed)     value of child object-position
 * $width       (mixed)     value of child width
 * $height      (mixed)     value of child height
 */
@mixin flex-fit(
  $method: cover,
  $position: center,
  $width: 100%,
  $height: 100%
) {
  display: flex;
  overflow: hidden;

  > *:last-child {
    object: {
      fit: $method;
      position: $position;
    }
    width: $width;
    height: $height;
    min-width: 100%;
    min-height: 100%;
  }

  > *:not(:last-child) {
    display: none !important;
  }
}
